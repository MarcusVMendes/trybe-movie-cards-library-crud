{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","this","props","movie","imagePath","title","storyline","id","data-testid","src","alt","to","React","Component","Loading","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","requestAPI","a","setState","loading","state","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","type","className","value","onChange","event","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","handleClick","match","params","movieAPI","requestMovie","NewMovie","shouldRedirect","EditMovie","requestAPi","console","log","NotFound","App","basename","process","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e45b06fe.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie: { imagePath, title, storyline, id } } = this.props;\n    return (\n      <div data-testid=\"movie-card\">\n        <img src={ imagePath } alt={ `Filme:${title}` } />\n        <h4>{ title }</h4>\n        <p>{ storyline }</p>\n        <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    imagePath: PropTypes.string,\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\n// console.log(movieAPI);\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.requestAPI();\n  }\n\n  requestAPI = async () => {\n    const movies = await movieAPI.getMovies();\n    this.setState({\n      movies,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    // Render Loading here if the request is still happening\n\n    return (\n      <div data-testid=\"movie-list\">\n        {loading ? <Loading />\n          : movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <Link to=\"/\">\n        <div>\n          <button\n            type=\"button\"\n            onClick={ this.handleSubmit }\n          >\n            Submit\n          </button>\n        </div>\n      </Link>\n    );\n  }\n  // rever a necessidade do link no botao\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    imagePath: PropTypes.string,\n    storyline: PropTypes.string,\n    genre: PropTypes.string,\n    rating: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movie: {},\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.requestMovie();\n  }\n\n  handleClick = async () => {\n    const { match: { params: { id } } } = this.props;\n    await movieAPI.deleteMovie(id);\n  }\n\n  requestMovie = async () => {\n    const { match: { params: { id } } } = this.props;\n    const movie = await movieAPI.getMovie(id);\n\n    this.setState({\n      movie,\n      loading: false,\n    });\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n    const { movie, loading } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = movie;\n\n    return (\n      <div>\n        {loading ? <Loading />\n          : (\n            <div data-testid=\"movie-details\">\n              <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n              <p>{ `Title: ${title}` }</p>\n              <p>{ `Subtitle: ${subtitle}` }</p>\n              <p>{ `Storyline: ${storyline}` }</p>\n              <p>{ `Genre: ${genre}` }</p>\n              <p>{ `Rating: ${rating}` }</p>\n              <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n              <Link onClick={ this.handleClick } to=\"/\">DELETAR</Link>\n              <Link to=\"/\">VOLTAR</Link>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.objectOf(PropTypes.object),\n}.isRequired;\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit = async (newMovie) => {\n    await movieAPI.createMovie(newMovie);\n\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Redirect } from 'react-router-dom';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: {},\n      loading: true,\n      shouldRedirect: false,\n    };\n  }\n\n  componentDidMount() {\n    this.requestAPi();\n  }\n\n  handleSubmit = async (updatedMovie) => {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  requestAPi = async () => {\n    const { match: { params: { id } } } = this.props;\n    const movie = await movieAPI.getMovie(id);\n    this.setState({\n      movie,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie, loading } = this.state;\n    console.log(movie);\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      // render Loading\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        {loading ? <Loading />\n          : (<MovieForm movie={ movie } onSubmit={ this.handleSubmit } />)}\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.objectOf(PropTypes.object),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>Movie Card Library CRUD</div>\n      <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      <Switch>\n        <Route exact path=\"/movies/new\" component={NewMovie} />\n        <Route exact path=\"/movies/:id\" component={MovieDetails} />\n        <Route exact path=\"/movies/:id/edit\" component={EditMovie} />\n        <Route exact path=\"/\" component={MovieList} />\n        <Route component={NotFound} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}